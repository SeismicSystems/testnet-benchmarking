---
- name: Setup and generate keys on all instances
  hosts: ec2_instances
  become: yes
  vars:
    docker_image: "summit"
    container_name: "summit"
    base_port: 8080
    base_prom_port: 9090
    
  tasks:
    - name: Bootstrap - Install pip using raw command
      raw: yum install -y python3-pip
      
    - name: Bootstrap - Install and upgrade pip
      raw: python3.8 -m pip install --upgrade pip
      
    - name: Bootstrap - Install Python packages
      raw: python3.8 -m pip install virtualenv setuptools wheel

    - name: Gather OS facts
      setup:
        filter: ansible_os_family

    - name: Create virtual environment
      shell: python3.8 -m venv /home/ubuntu/venv
      become: yes
      become_user: ubuntu

    - name: Upgrade pip in virtual environment
      shell: /home/ubuntu/venv/bin/pip install --upgrade pip
      become: yes
      become_user: ubuntu


    - name: Install required Python packages for Docker modules
      pip:
        name:
          - "requests>=2.20.0,<3.0.0"
          - "urllib3>=1.26.0,<2.0.0"
          - "docker>=5.0.0"
        state: present

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    # Handle pre-built image or build from source
    - name: Check if pre-built image tar exists locally
      stat:
        path: "{{ pre_built_image_tar }}"
      register: tar_file_check
      when: pre_built_image_tar is defined
      delegate_to: localhost
      become: no

    - name: Copy pre-built Docker image tar to instances
      copy:
        src: "{{ pre_built_image_tar }}"
        dest: "/tmp/summit.tar"
      when: 
        - pre_built_image_tar is defined
        - tar_file_check.stat.exists

    - name: Load pre-built Docker image from tar
      docker_image:
        name: "{{ docker_image }}"
        load_path: "/tmp/summit.tar"
        source: load
      when: pre_built_image_tar is defined


    - name: Remove old image to force using newly loaded one
      docker_image:
        name: "{{ docker_image }}"
        state: absent
        force_absent: yes
      when: pre_built_image_tar is defined
      ignore_errors: yes

    - name: Force reload pre-built Docker image
      docker_image:
        name: "{{ docker_image }}"
        load_path: "/tmp/summit.tar"
        source: load
        force_source: yes
      when: pre_built_image_tar is defined

    - name: Verify loaded image has prom-port
      shell: docker run --entrypoint ./seismicbft-node {{ docker_image }} --help | grep -i prom || echo "NO PROM FOUND"
      register: loaded_image_check
      when: pre_built_image_tar is defined

    - name: Show loaded image prom check
      debug:
        msg: "Loaded image prom check: {{ loaded_image_check.stdout }}"
      when: pre_built_image_tar is defined


    - name: Create build directory (if building from source)
      file:
        path: /tmp/summit-build
        state: directory
        mode: '0755'
      when: pre_built_image_tar is not defined

    - name: Copy Dockerfile to EC2 instance
      copy:
        src: "../summit/Dockerfile"
        dest: "/tmp/summit-build/Dockerfile"
        mode: '0644'
      when: pre_built_image_tar is not defined

    - name: Build Docker image with PAT
      docker_image:
        name: "{{ docker_image }}"
        build:
          path: "/tmp/summit-build"
          pull: yes
        source: build
        force_source: "{{ force_rebuild | default(false) }}"
      when: pre_built_image_tar is not defined
      # no_log: true  # Temporarily disabled to see error

    # Keys will be generated locally and copied to instances
    - name: Create key storage directory
      file:
        path: /opt/consensus/keys
        state: directory
        mode: '0755'

    - name: Set node info (keys will be provided externally)
      set_fact:
        node_port: "{{ base_port }}"
        node_ip: "{{ ansible_host }}"

- name: Generate keys and create genesis file locally
  hosts: localhost
  gather_facts: no
  vars:
    base_port: 8080
    eth_genesis_hash: "{{ genesis_hash | default('0x655cc1ecc77fe1eab4b1f461b7fddc9b06109b5ab3e9dc68c144b30c773') }}"
    
  tasks:
    - name: Gather all node information
      set_fact:
        all_nodes: "{{ groups['ec2_instances'] | map('extract', hostvars) | list }}"
        
    - name: Clean up existing testnet directory
      file:
        path: "{{ playbook_dir }}/testnet"
        state: absent
      delegate_to: localhost
        
    - name: Create initial genesis.toml template
      copy:
        content: |
          eth_genesis_hash = "{{ eth_genesis_hash }}"
          leader_timeout_ms = 2000
          notarization_timeout_ms = 4000
          nullify_timeout_ms = 4000
          activity_timeout_views = 256
          skip_timeout_views = 32
          max_message_size_bytes = 104857600
          namespace = "_SEISMIC_BFT"
          identity = "b5c71ffedf9af700a95b200587265710e76337c9bcbfba8c1830683351b4c8982f507a59ddc821de53eb8b848993d1e38eba8abf3e7b18acebe921fdf23ac6d7a0d6c32010ceb149083d9fb5f5dc284a64eff22b59381bf5a58685e91a73aef28969e5b152f4ef6a6d9979f110fc43ad126e7a745fbab1a7f2a8d434e868c8de5d031a6af2d24f398e7c57fb79e4ae00"
          {% for node in all_nodes %}

          [[validators]]
          public_key = "PLACEHOLDER_KEY_{{ loop.index0 }}"
          ip_address = "{{ node.node_ip }}:{{ node.node_port }}"
          {% endfor %}
        dest: "{{ playbook_dir }}/genesis.toml"
        mode: '0644'
      delegate_to: localhost

    - name: Create example_genesis.toml from genesis.toml for DKG binary
      copy:
        src: "{{ playbook_dir }}/genesis.toml"
        dest: "{{ playbook_dir }}/example_genesis.toml"
        remote_src: no
      delegate_to: localhost
      
    - name: Check if DKG binary exists
      stat:
        path: "{{ playbook_dir }}/dkg_testnet"
      register: dkg_binary

    - name: Execute DKG binary to generate keys and populate genesis.toml
      command: ./dkg_testnet --nodes {{ all_nodes | length }}
      args:
        chdir: "{{ playbook_dir }}"
      register: dkg_output
      when: dkg_binary.stat.exists
      
    - name: Display DKG output
      debug:
        msg: "{{ dkg_output.stdout_lines }}"
      when: dkg_binary.stat.exists

    - name: Fail if DKG binary not found
      fail:
        msg: "DKG binary not found at {{ playbook_dir }}/dkg_testnet"
      when: not dkg_binary.stat.exists

    - name: Verify genesis file was updated
      stat:
        path: "{{ playbook_dir }}/example_genesis.toml"
      register: genesis_stat
      delegate_to: localhost

    - name: Check if genesis still has placeholders
      lineinfile:
        path: "{{ playbook_dir }}/example_genesis.toml"
        line: 'public_key = "PLACEHOLDER_KEY_0"'
        state: absent
      check_mode: yes
      register: placeholder_check
      delegate_to: localhost

    - name: Fail if genesis still has placeholders
      fail:
        msg: "Genesis file still contains placeholder keys. DKG binary may have failed."
      when: placeholder_check.changed
      delegate_to: localhost

    - name: Display generated genesis.toml content
      slurp:
        src: "{{ playbook_dir }}/genesis.toml"
      register: genesis_file
      delegate_to: localhost
      
    - name: Show genesis.toml content
      debug:
        msg: "{{ genesis_file.content | b64decode }}"

- name: Deploy consensus containers with genesis file
  hosts: ec2_instances
  become: yes
  vars:
    docker_image: "summit"
    container_name: "summit"
    base_port: 8080
    base_prom_port: 9090
    
  tasks:
    - name: Create consensus directory on host
      file:
        path: /root/.seismic/consensus
        state: directory
        mode: '0755'
        
    - name: Copy generated key files to instances
      copy:
        src: "{{ playbook_dir }}/testnet/node{{ ansible_play_hosts.index(inventory_hostname) }}/{{ item }}"
        dest: "/root/.seismic/consensus/{{ item }}"
        mode: '0600'
      loop:
        - key.pem
        - share.pem

    - name: Stop any existing containers first
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Force remove directories from /tmp with verification
      shell: |
        rm -rf /tmp/{{ item }}
        if [ -e "/tmp/{{ item }}" ]; then
          echo "Failed to remove /tmp/{{ item }}"
          ls -la /tmp/{{ item }}
          exit 1
        fi
      loop:
        - example_genesis.toml
        - key.pem
        - share.pem

    - name: Copy key files to /tmp for Docker mounting
      copy:
        src: "{{ playbook_dir }}/testnet/node{{ ansible_play_hosts.index(inventory_hostname) }}/{{ item }}"
        dest: "/tmp/{{ item }}"
        mode: '0644'
        force: yes
      loop:
        - key.pem
        - share.pem

    - name: Copy genesis.toml to all instances
      copy:
        src: "{{ playbook_dir }}/example_genesis.toml"
        dest: "/tmp/example_genesis.toml"
        mode: '0644'

    - name: Set ports for this instance
      set_fact:
        instance_port: "{{ base_port }}"
        instance_prom_port: "{{ base_prom_port }}"

    - name: Stop existing container
      docker_container:
        name: "{{ container_name }}"
        state: absent
        force_kill: yes
      ignore_errors: yes
      
    - name: Clean up any remaining containers using this image
      shell: docker ps -a --filter "ancestor={{ docker_image }}" --format "{{ '{{.Names}}' }}" | xargs -r docker rm -f
      ignore_errors: yes

    - name: Clear summit state (if requested)
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/root/.seismic/consensus"
      when: clear_state | default(false) | bool
      register: dir_check

    - name: Display removal confirmation
      debug:
        msg: "Directory {{ item.item }} removal: {{ 'successful' if item.changed else 'no change needed' }}"
      loop: "{{ dir_check.results }}"
      when: 
        - clear_state | default(false) | bool
        - dir_check is defined

    - name: Build command arguments
      set_fact:
        summit_args: 
          - "--port"
          - "{{ instance_port }}"
          - "--prom-port" 
          - "{{ instance_prom_port }}"
          - "--engine-ipc-path"
          - "/tmp/reth-engine.ipc"
          - "--share-path"
          - "/app/share.pem"
          - "--key-path"
          - "/app/key.pem"
          - "--store-path"
          - "/app/store"
    
    - name: Create bench_block_dir directory if provided
      file:
        path: "{{ bench_block_dir }}"
        state: directory
        mode: '0755'
      when: bench_block_dir is defined and bench_block_dir != ''

    - name: Download bench tar file if bench_block_dir provided
      get_url:
        url: "{{ bench_tar_url }}"
        dest: "/tmp/bench_blocks.tar.gz"
        mode: '0644'
      when: 
        - bench_block_dir is defined and bench_block_dir != ''
        - bench_tar_url is defined and bench_tar_url != ''

    - name: Extract bench tar.gz to specified directory
      shell: tar -xzvf /tmp/bench_blocks.tar.gz -C "{{ bench_block_dir }}" --strip-components=1
      when: 
        - bench_block_dir is defined and bench_block_dir != ''
        - bench_tar_url is defined and bench_tar_url != ''

    - name: Add bench_block_dir argument if provided
      set_fact:
        summit_args: "{{ summit_args + ['--bench-block-dir', bench_block_dir] }}"
      when: bench_block_dir is defined and bench_block_dir != ''

    - name: Run consensus Docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        command: "{{ summit_args }}"
        state: started
        restart_policy: no
        detach: yes
        network_mode: host
        working_dir: /app
        ports:
          - "{{ instance_port }}:{{ instance_port }}"
          - "{{ instance_prom_port }}:{{ instance_prom_port }}"
        volumes: >-
          {{
            [
              "/tmp/example_genesis.toml:/app/example_genesis.toml:ro",
              "/tmp/key.pem:/app/key.pem:ro", 
              "/tmp/share.pem:/app/share.pem:ro",
              "/root/.seismic:/root/.seismic:ro",
              "/tmp:/tmp"
            ] + 
            ([bench_block_dir + ":" + bench_block_dir + ":ro"] if (bench_block_dir is defined and bench_block_dir != '') else [])
          }}
        log_driver: json-file
        log_options:
          max-size: "50m"
          max-file: "3"

    - name: Wait a moment for container to start
      pause:
        seconds: 10

    - name: Check container logs before wait
      command: docker logs --tail 20 {{ container_name }}
      register: early_container_logs
      ignore_errors: yes
      
    - name: Display early container logs
      debug:
        msg: "{{ early_container_logs.stdout_lines }}"
      when: early_container_logs.stdout_lines is defined

    - name: Wait for container to be ready
      wait_for:
        port: "{{ instance_port }}"
        #host: "{{ ansible_host }}"
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 60
        delay: 5

    - name: Check container status
      docker_container_info:
        name: "{{ container_name }}"
      register: container_info

    - name: Display container status
      debug:
        msg: "Container {{ container_name }} on {{ inventory_hostname }} is {{ container_info.container.State.Status }} (Port: {{ instance_port }})"

    - name: Show container logs
      command: docker logs --tail 10 {{ container_name }}
      register: container_logs
      
    - name: Display container logs
      debug:
        msg: "{{ container_logs.stdout_lines }}"
