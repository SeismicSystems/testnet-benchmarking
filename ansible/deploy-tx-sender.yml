---
- name: Deploy tx-sender Docker container to EC2 instances
  hosts: ec2_instances
  become: yes
  vars:
    docker_image: "tx-sender"
    container_name: "tx-sender"
    # Optional: provide pre_built_image_tar path to skip building
    # pre_built_image_tar: "../tx-sender.tar"
    # Required: number of keys per instance
    num_keys: 2000
    
  tasks:
    - name: Bootstrap - Install pip using raw command
      raw: yum install -y python3-pip
      
    - name: Bootstrap - Install and upgrade pip
      raw: python3.8 -m pip install --upgrade pip
      
    - name: Bootstrap - Install Python packages
      raw: python3.8 -m pip install virtualenv setuptools wheel

    - name: Gather OS facts
      setup:
        filter: ansible_os_family

    - name: Create virtual environment
      shell: python3.8 -m venv /home/ec2-user/venv
      become: yes
      become_user: ec2-user

    - name: Upgrade pip in virtual environment
      shell: /home/ec2-user/venv/bin/pip install --upgrade pip
      become: yes
      become_user: ec2-user

    - name: Install required Python packages for Docker modules (compatible versions)
      pip:
        name:
          - "requests>=2.20.0,<3.0.0"
          - "urllib3>=1.26.0,<2.0.0"
          - "docker>=5.0.0"
        state: present

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Set ulimits for high connection load
      blockinfile:
        path: /etc/security/limits.conf
        block: |
          * soft nofile 10000
          * hard nofile 10000
        marker: "# {mark} ANSIBLE MANAGED BLOCK - TX SENDER ULIMITS"

    - name: Set system-wide ulimits
      lineinfile:
        path: /etc/systemd/system.conf
        regexp: '^#?DefaultLimitNOFILE='
        line: 'DefaultLimitNOFILE=10000'

    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes

    # Pre-built image path (if provided)
    - name: Check if pre-built image tar exists locally
      local_action:
        module: stat
        path: "{{ pre_built_image_tar }}"
      register: tar_file_check
      when: pre_built_image_tar is defined
      become: no

    - name: Fail if pre-built image tar doesn't exist
      fail:
        msg: |
          Pre-built image tar file not found: {{ pre_built_image_tar }}
          Please create it first by running:
          docker build -t tx-sender .
          docker save tx-sender > {{ pre_built_image_tar }}
      when: 
        - pre_built_image_tar is defined
        - not tar_file_check.stat.exists

    - name: Copy pre-built Docker image tar to instances
      copy:
        src: "{{ pre_built_image_tar }}"
        dest: "/tmp/tx-sender.tar"
      when: 
        - pre_built_image_tar is defined
        - tar_file_check.stat.exists

    - name: Load pre-built Docker image from tar
      docker_image:
        name: "{{ docker_image }}"
        load_path: "/tmp/tx-sender.tar"
        source: load
        force_source: yes
      when: pre_built_image_tar is defined

    - name: Clean up tar file
      file:
        path: "/tmp/tx-sender.tar"
        state: absent
      when: pre_built_image_tar is defined

    # Build from source (if pre-built image not provided)
    - name: Create build directory
      file:
        path: /tmp/tx-sender
        state: directory
        mode: '0755'
      when: pre_built_image_tar is not defined

    - name: Copy source files to EC2 instance
      copy:
        src: "{{ item }}"
        dest: "/tmp/tx-sender/"
        mode: '0644'
      loop:
        - "Dockerfile"
        - "Cargo.toml"
        - "Cargo.lock"
        - "rust-toolchain.toml"
        - "private_keys.txt"
        - "inventory.ini"
      when: pre_built_image_tar is not defined

    - name: Copy src directory to EC2 instance
      copy:
        src: "src/"
        dest: "/tmp/tx-sender/src/"
        mode: '0644'
      when: pre_built_image_tar is not defined

    - name: Check if Docker image already exists
      docker_image_info:
        name: "{{ docker_image }}"
      register: image_info
      when: pre_built_image_tar is not defined

    - name: Build Docker image (only if not exists or force rebuild)
      docker_image:
        name: "{{ docker_image }}"
        build:
          path: "/tmp/tx-sender"
          pull: yes
        source: build
        force_source: "{{ force_rebuild | default(false) }}"
      when: 
        - pre_built_image_tar is not defined
        - image_info.images | length == 0 or force_rebuild | default(false)

    # Calculate instance parameters
    - name: Get total number of instances
      set_fact:
        total_instances: "{{ groups['ec2_instances'] | length }}"
        instance_index: "{{ groups['ec2_instances'].index(inventory_hostname) }}"

    # Deploy container (common for both paths)
    - name: Stop existing container
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Run tx-sender Docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: no
        network_mode: host
        detach: yes
        command: >-
          tx-sender
          --instance-index {{ instance_index }}
          --num-instances {{ total_instances }}
          --num-keys {{ num_keys }}
        log_driver: json-file
        log_options:
          max-size: "10m"
          max-file: "3"

    - name: Wait for container to start
      pause:
        seconds: 10

    - name: Check container status
      docker_container_info:
        name: "{{ container_name }}"
      register: container_info

    - name: Display container status
      debug:
        msg: "Container {{ container_name }} on instance {{ instance_index }} is {{ container_info.container.State.Status }}"

    - name: Show container logs (last 20 lines)
      command: docker logs --tail 20 {{ container_name }}
      register: container_logs
      
    - name: Display container logs
      debug:
        msg: "{{ container_logs.stdout_lines }}"