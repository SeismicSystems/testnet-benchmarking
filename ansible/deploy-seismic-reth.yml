---
- name: Deploy seismic-reth Docker container to EC2 instances
  hosts: ec2_instances
  become: yes
  vars:
    docker_image: "seismic-reth"
    container_name: "seismic-reth"
    jwt_secret: "f79ae8046bc11c9927afe911db7143c51a806c4a537cc08e0d37140b0192f430"
    # Optional: provide pre_built_image_tar path to skip building
    # pre_built_image_tar: "../seismic-reth.tar"
    
  tasks:
    - name: Bootstrap - Install pip using raw command
      raw: yum install -y python3-pip
      
    - name: Bootstrap - Install and upgrade pip
      raw: python3.8 -m pip install --upgrade pip
      
    - name: Bootstrap - Install Python packages
      raw: python3.8 -m pip install virtualenv setuptools wheel

    - name: Gather OS facts
      setup:
        filter: ansible_os_family

    - name: Create virtual environment
      shell: python3.8 -m venv /home/ubuntu/venv
      become: yes
      become_user: ubuntu

    - name: Upgrade pip in virtual environment
      shell: /home/ubuntu/venv/bin/pip install --upgrade pip
      become: yes
      become_user: ubuntu

    - name: Install required Python packages for Docker modules (compatible versions)
      pip:
        name:
          - "requests>=2.20.0,<3.0.0"
          - "urllib3>=1.26.0,<2.0.0"
          - "docker>=5.0.0"
        state: present

    - name: Ensure Docker service is running
      systemd:
        name: docker
        state: started
        enabled: yes


    - name: Set soft ulimit for file descriptors
      lineinfile:
        path: /etc/security/limits.conf
        line: "* soft nofile 20000"
        backup: yes

    - name: Set hard ulimit for file descriptors
      lineinfile:
        path: /etc/security/limits.conf
        line: "* hard nofile 20000"
        backup: yes

    - name: Increase connection tracking limits for high-throughput consensus
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { name: 'net.netfilter.nf_conntrack_max', value: '262144' }
        - { name: 'net.netfilter.nf_conntrack_buckets', value: '65536' }
        - { name: 'net.netfilter.nf_conntrack_tcp_timeout_established', value: '600' }
        - { name: 'net.netfilter.nf_conntrack_tcp_timeout_time_wait', value: '30' }
        - { name: 'net.netfilter.nf_conntrack_tcp_timeout_fin_wait', value: '30' }


    # Pre-built image path (if provided)
    - name: Check if pre-built image tar exists locally
      stat:
        path: "{{ pre_built_image_tar }}"
      register: tar_file_check
      when: pre_built_image_tar is defined
      delegate_to: localhost
      become: no

    - name: Fail if pre-built image tar doesn't exist
      fail:
        msg: |
          Pre-built image tar file not found: {{ pre_built_image_tar }}
          Please create it first by running:
          docker build -t seismic-reth .
          docker save seismic-reth > {{ pre_built_image_tar }}
      when: 
        - pre_built_image_tar is defined
        - not tar_file_check.stat.exists

    - name: Copy pre-built Docker image tar to instances
      copy:
        src: "{{ pre_built_image_tar }}"
        dest: "/tmp/seismic-reth.tar"
      when: 
        - pre_built_image_tar is defined
        - tar_file_check.stat.exists

    - name: Load the tar file and capture output
      shell: docker load --input "/tmp/seismic-reth.tar"
      register: loaded_image_info
      when: pre_built_image_tar is defined

    - name: Extract loaded image name from docker load output
      set_fact:
        loaded_image_name: "{{ loaded_image_info.stdout | regex_replace('Loaded image: (.+)', '\\1') }}"
      when: pre_built_image_tar is defined

    - name: Debug loaded image name
      debug:
        msg: "Loaded image: {{ loaded_image_name }}, Expected: {{ docker_image }}"
      when: pre_built_image_tar is defined

    - name: Tag loaded image as expected name if different
      shell: docker tag "{{ loaded_image_name }}" "{{ docker_image }}:latest"
      when: 
        - pre_built_image_tar is defined
        - loaded_image_name != (docker_image + ':latest')

    - name: Clean up tar file
      file:
        path: "/tmp/seismic-reth.tar"
        state: absent
      when: pre_built_image_tar is defined

    # Build from source (if pre-built image not provided)
    - name: Create build directory
      file:
        path: /tmp/seismic-reth
        state: directory
        mode: '0755'
      when: pre_built_image_tar is not defined

    - name: Copy Dockerfile to EC2 instance
      copy:
        src: "../seismic-reth/Dockerfile"
        dest: "/tmp/seismic-reth/Dockerfile"
        mode: '0644'
      when: pre_built_image_tar is not defined

    - name: Check if Docker image already exists
      docker_image_info:
        name: "{{ docker_image }}"
      register: image_info
      when: pre_built_image_tar is not defined

    - name: Build Docker image (only if not exists or force rebuild)
      docker_image:
        name: "{{ docker_image }}"
        build:
          path: "/tmp/seismic-reth"
          pull: yes
        source: build
        force_source: "{{ force_rebuild | default(false) }}"
      when: 
        - pre_built_image_tar is not defined
        - image_info.images | length == 0 or force_rebuild | default(false)

    # Deploy container (common for both paths)
    - name: Stop existing container
      docker_container:
        name: "{{ container_name }}"
        state: absent
      ignore_errors: yes

    - name: Clear seismic-reth state (if requested)
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "/root/.cache/reth"
        - "/root/.local/share/reth"
      when: clear_state | default(false)

    - name: Display removal confirmation
      debug:
        msg: "Directory {{ item.item }} exists: {{ item.stat.exists }}"
      loop: "{{ dir_check.results }}"
      when: 
        - clear_state | default(false)
        - dir_check is defined

    - name: Run seismic-reth Docker container
      docker_container:
        name: "{{ container_name }}"
        image: "{{ docker_image }}"
        state: started
        restart_policy: no
        network_mode: host
        detach: yes
        ports:
          - "8545:8545"
          - "8546:8546"
          - "8551:8551"
          - "9001:9001"
          - "30303:30303"
          - "30303:30303/udp"
        volumes:
          - "/tmp:/tmp"
        env:
          JWT_SECRET: "{{ jwt_secret }}"
        log_driver: json-file
        log_options:
          max-size: "10m"
          max-file: "3"

    - name: Wait for container to be healthy
      wait_for:
        port: 8545
        host: "{{ ansible_default_ipv4.address }}"
        timeout: 120
        delay: 10

    - name: Check container status
      docker_container_info:
        name: "{{ container_name }}"
      register: container_info

    - name: Display container status
      debug:
        msg: "Container {{ container_name }} is {{ container_info.container.State.Status }}"

    - name: Show container logs (last 20 lines)
      command: docker logs --tail 20 {{ container_name }}
      register: container_logs
      
    - name: Display container logs
      debug:
        msg: "{{ container_logs.stdout_lines }}"
